{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundery/ErrorBoundery.js","resources/img/vision.png","components/pages/Main.js"],"names":["ErrorMessage","src","img","alt","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","responce","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apikey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getComic","char","name","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices","View","imgStyle","className","style","href","RandomChar","setChar","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","arr","item","i","tabIndex","ref","el","current","onCharSelected","forEach","classList","remove","add","focus","onKeyPress","e","key","focusOnItem","renderItems","disabled","Skeleton","srcNull","CharInfo","charId","sceleton","ErrorBoundery","state","errorInfo","this","setState","children","Component","MainPage","selectedChar","decoration"],"mappings":"iGAAe,UAA0B,kC,OCM1BA,IALM,WACjB,OACI,qBAAKC,IAAKC,EAAKC,IAAI,Y,4ECsDZC,IAvDU,WACrB,MCDmB,WACnB,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,mBAAS,MAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAuBA,MAAO,CAACH,UAASI,QArBDC,sBAAW,uCAAC,WAAOC,GAAP,mCAAAC,EAAA,6DAAYC,EAAZ,+BAAqB,MAAOC,EAA5B,+BAAmC,KAAMC,EAAzC,+BAAmD,CAAC,eAAgB,mBAC5FT,GAAW,GADa,kBAIGU,MAAML,EAAK,CAACE,SAAQC,OAAMC,YAJ7B,WAIdE,EAJc,QAMPC,GANO,uBAOV,IAAIC,MAAJ,0BAA6BR,EAA7B,qBAA6CM,EAASG,SAP5C,yBASDH,EAASI,OATR,eASdC,EATc,OAUpBhB,GAAW,GAVS,kBAWbgB,GAXa,wCAapBhB,GAAW,GACXE,EAAS,KAAEe,SAdS,+DAAD,sDAiBxB,IAIuBhB,QAAOiB,WAFdd,uBAAY,kBAAMF,EAAS,QAAO,KDtBPiB,GAAvCpB,EAAP,EAAOA,QAASI,EAAhB,EAAgBA,QAASF,EAAzB,EAAyBA,MAAOiB,EAAhC,EAAgCA,WAE1BE,EAAW,4CACXC,EAAU,0CAIVC,EAAgB,uCAAG,0CAAAhB,EAAA,6DAAOiB,EAAP,+BAHL,IAGK,SACHpB,EAAQ,GAAD,OAAIiB,EAAJ,qCAAyCG,EAAzC,YAAmDF,IADvD,cACfG,EADe,yBAEdA,EAAIR,KAAKS,QAAQC,IAAIC,IAFP,2CAAH,qDAKhBC,EAAY,uCAAG,WAAOC,GAAP,eAAAvB,EAAA,sEACCH,EAAQ,GAAD,OAAIiB,EAAJ,sBAA0BS,EAA1B,YAAgCR,IADxC,cACXG,EADW,yBAEVG,EAAoBH,EAAIR,KAAKS,QAAQ,KAF3B,2CAAH,sDAKZK,EAAY,uCAAG,0CAAAxB,EAAA,6DAAOiB,EAAP,+BAAgB,EAAhB,SACCpB,EAAQ,GAAD,OAAIiB,EAAJ,qDAAyDG,EAAzD,YAAmEF,IAD3E,cACXG,EADW,yBAEVA,EAAIR,KAAKS,QAAQC,IAAIK,IAFX,2CAAH,qDAKZC,EAAQ,uCAAG,WAAOH,GAAP,eAAAvB,EAAA,sEACKH,EAAQ,GAAD,OAAIiB,EAAJ,kBAAsBS,EAAtB,YAA4BR,IADxC,cACPG,EADO,yBAENO,EAAiBP,EAAIR,KAAKS,QAAQ,KAF5B,2CAAH,sDAMTE,EAAsB,SAACM,GACxB,MAAO,CACHJ,GAAII,EAAKJ,GACTK,KAAMD,EAAKC,KACXC,YAAaF,EAAKE,YAClBC,UAAWH,EAAKG,UAAUC,KAAO,IAAMJ,EAAKG,UAAUE,UACtDC,SAAUN,EAAKO,KAAK,GAAGnC,IACvBoC,KAAMR,EAAKO,KAAK,GAAGnC,IACnBqC,OAAQT,EAAKS,OAAOC,QAGtBZ,EAAmB,SAACW,GACtB,MAAO,CACHb,GAAIa,EAAOb,GACXe,MAAOF,EAAOE,MACdT,YAAaO,EAAOP,aAAe,0BACnCU,UAAWH,EAAOG,UAAP,UAAsBH,EAAOG,UAA7B,OAA8C,2CACzDT,UAAWM,EAAON,UAAUC,KAAO,IAAMK,EAAON,UAAUE,UAC1DQ,SAAUJ,EAAOK,YAAYD,UAAY,QACzCE,MAAON,EAAOO,OAAOD,MAAd,UAAyBN,EAAOO,OAAOD,MAAvC,KAAkD,kBAIjE,MAAO,CAACjD,UAASE,QAAOiB,aAAYI,mBAAkBM,eAAcE,eAAcE,c,sKEtDvE,G,MAAA,IAA0B,qC,OC4DnCkB,EAAO,SAAC,GAAY,IAAXjB,EAAU,EAAVA,KACJC,EAAgDD,EAAhDC,KAAMC,EAA0CF,EAA1CE,YAAaC,EAA6BH,EAA7BG,UAAWG,EAAkBN,EAAlBM,SAAUE,EAAQR,EAARQ,KAC3CU,EAAW,CAAC,UAAc,SAK9B,MAJkB,wEAAdf,IACAe,EAAW,CAAC,UAAc,YAI1B,sBAAKC,UAAU,oBAAf,UACI,qBAAK1D,IAAK0C,EAAWxC,IAAI,mBAAmBwD,UAAU,kBAAkBC,MAAOF,IAC/E,sBAAKC,UAAU,mBAAf,UACI,mBAAGA,UAAU,mBAAb,SAAiClB,IACjC,mBAAGkB,UAAU,oBAAb,SACKjB,IAEL,sBAAKiB,UAAU,mBAAf,UACI,mBAAGE,KAAMf,EAAUa,UAAU,sBAA7B,SACI,qBAAKA,UAAU,QAAf,wBAEJ,mBAAGE,KAAMb,EAAMW,UAAU,2BAAzB,SACI,qBAAKA,UAAU,QAAf,8BAQTG,EAhFI,WAEf,MAAwBzD,mBAAS,MAAjC,mBAAOmC,EAAP,KAAauB,EAAb,KAGA,EAAmD3D,cAA5CE,EAAP,EAAOA,QAASE,EAAhB,EAAgBA,MAAO2B,EAAvB,EAAuBA,aAAcV,EAArC,EAAqCA,WAErCuC,qBAAU,WACNC,IACA,IAAMC,EAAUC,YAAYF,EAAY,KAExC,OAAO,WACHG,cAAcF,MAEnB,IAEH,IAAMG,EAAe,SAAC7B,GAClBuB,EAAQvB,IAGNyB,EAAa,WACfxC,IACA,IAAMW,EAAKkC,KAAKC,MAAM,IAAAD,KAAKE,UAAkC,OACzDrC,EAAaC,GAAIqC,KAAKJ,IAGxBK,EAAelE,EAAQ,cAACR,EAAA,EAAD,IAAkB,KACzC2E,EAAUrE,EAAU,cAACsE,EAAA,EAAD,IAAa,KACjCC,EAAYvE,GAAWE,IAAUgC,EAA+B,KAAvB,cAAC,EAAD,CAAMA,KAAMA,IAE3D,OACI,sBAAKmB,UAAU,aAAf,UACKe,EACAC,EACAE,EACD,sBAAKlB,UAAU,qBAAf,UACI,oBAAGA,UAAU,oBAAb,wCAC+B,uBAD/B,4CAIA,mBAAGA,UAAU,oBAAb,mCAGA,wBAAQmB,QAASb,EAAYN,UAAU,sBAAvC,SACI,qBAAKA,UAAU,QAAf,sBAEJ,qBAAK1D,IAAK8E,EAAS5E,IAAI,UAAUwD,UAAU,kC,QC4D5CqB,G,MA3GE,SAACC,GACd,MAAgC5E,mBAAS,IAAzC,mBAAO6E,EAAP,KAAiBC,EAAjB,KACA,EAA4C9E,oBAAS,GAArD,mBAAO+E,EAAP,KAAuBC,EAAvB,KACA,EAA4BhF,mBAAS,KAArC,mBAAOyB,EAAP,KAAewD,EAAf,KACA,EAAkCjF,oBAAS,GAA3C,mBAAOkF,EAAP,KAAkBC,EAAlB,KAED,EAA2CpF,cAApCE,EAAP,EAAOA,QAASE,EAAhB,EAAgBA,MAAOqB,EAAvB,EAAuBA,iBAEvBmC,qBAAU,WACNyB,EAAU3D,GAAQ,KACnB,IAGF,IAAM2D,EAAY,SAAC3D,EAAQ4D,GACbL,GAAVK,GACA7D,EAAiBC,GACZ2C,KAAKkB,IAGRA,EAAmB,SAACC,GACtB,IAAIC,GAAQ,EACTD,EAAYE,OAAS,IACpBD,GAAQ,GAEZV,GAAY,SAAAD,GAAQ,4BAAQA,GAAR,YAAqBU,OACzCP,GAAkB,SAAAD,GAAc,OAAI,KACpCE,GAAU,SAAAxD,GAAM,OAAIA,EAAS,KAC7B0D,GAAa,SAAAD,GAAS,OAAIM,MAGxBE,EAAWC,iBAAO,IAmDxB,IAAM9C,EAlCN,SAAqB+C,GAAM,IAAD,OAChB/C,EAAS+C,EAAIhE,KAAI,SAACiE,EAAMC,GAC1B,IAAIzC,EAAW,CAAC,UAAc,SAK9B,MAJuB,wEAAnBwC,EAAKvD,YACLe,EAAW,CAAC,UAAc,UAI1B,qBACIC,UAAU,aAEVyC,SAAU,EACVC,IAAK,SAAAC,GAAE,OAAIP,EAASQ,QAAQJ,GAAKG,GACjCxB,QAAS,WA5BL,IAAC1C,EA4BW6C,EAAMuB,eAAeN,EAAK9D,IA5BrCA,EA6BW+D,EArB5BJ,EAASQ,QAAQE,SAAQ,SAAAP,GAAI,OAAIA,EAAKQ,UAAUC,OAAO,0BACvDZ,EAASQ,QAAQnE,GAAIsE,UAAUE,IAAI,uBACnCb,EAASQ,QAAQnE,GAAIyE,SAoBTC,WAAY,SAACC,GACK,MAAVA,EAAEC,KAAyB,UAAVD,EAAEC,MACnB,EAAK/B,MAAMuB,eAAeN,EAAK9D,IAC/B,EAAK6E,YAAYd,KAV7B,UAaQ,qBAAKlG,IAAKiG,EAAKvD,UAAWxC,IAAK+F,EAAKzD,KAAMmB,MAAOF,IACjD,qBAAKC,UAAU,aAAf,SAA6BuC,EAAKzD,SAZjCyD,EAAK9D,OAiBtB,OACI,oBAAIuB,UAAU,aAAd,SACKT,IAKCgE,CAAYhC,GAEpBR,EAAelE,EAAQ,cAACR,EAAA,EAAD,IAAkB,KACzC2E,EAAUrE,IAAY8E,EAAiB,cAACR,EAAA,EAAD,IAAa,KAG1D,OACI,sBAAKjB,UAAU,aAAf,UACKe,EACAC,EACAzB,EACD,wBAAQS,UAAU,mCACdwD,SAAU/B,EACVxB,MAAO,CAAC,QAAW2B,EAAY,OAAS,SACxCT,QAAS,kBAAMW,EAAU3D,IAH7B,SAII,qBAAK6B,UAAU,QAAf,8BCpFDyD,G,MAjBE,WACb,OACI,qCACI,mBAAGzD,UAAU,eAAb,0DACA,sBAAKA,UAAU,WAAf,UACI,sBAAKA,UAAU,yBAAf,UACI,qBAAKA,UAAU,2BACf,qBAAKA,UAAU,4BAEnB,qBAAKA,UAAU,0BACf,qBAAKA,UAAU,0BACf,qBAAKA,UAAU,kCCgCzBF,G,MAAO,SAAC,GAAY,IAGlB4D,EAHO7E,EAAU,EAAVA,KACJC,EAAwDD,EAAxDC,KAAMC,EAAkDF,EAAlDE,YAAaC,EAAqCH,EAArCG,UAAWG,EAA0BN,EAA1BM,SAAUE,EAAgBR,EAAhBQ,KAAMC,EAAUT,EAAVS,OAQrD,OAJIoE,EADa,wEAAd1E,EACW,CAAC,UAAc,WAEf,CAAC,UAAc,SAGzB,qCACI,sBAAKgB,UAAU,eAAf,UACI,qBAAK1D,IAAK0C,EAAWxC,IAAKsC,EAAMmB,MAAOyD,IACvC,gCACI,qBAAK1D,UAAU,kBAAf,SAAkClB,IAClC,sBAAKkB,UAAU,aAAf,UACI,mBAAGE,KAAMf,EAAUa,UAAU,sBAA7B,SACI,qBAAKA,UAAU,QAAf,wBAEJ,mBAAGE,KAAMb,EAAMW,UAAU,2BAAzB,SACI,qBAAKA,UAAU,QAAf,6BAKhB,qBAAKA,UAAU,cAAf,SACKjB,IAEL,qBAAKiB,UAAU,eAAf,qBACA,qBAAIA,UAAU,oBAAd,UACKV,EAAO6C,OAAS,EAAI,KAAO,yCAExB7C,EAAOhB,KAAI,SAACiE,EAAMC,GAEd,KAAGA,EAAI,GACP,OACI,oBAAYxC,UAAU,oBAAtB,SACKuC,EAAKzD,MADD0D,cAYtBmB,EAtFE,SAACrC,GACd,MAAwB5E,mBAAS,MAAjC,mBAAOmC,EAAP,KAAauB,EAAb,KAEA,EAAmD3D,cAA5CE,EAAP,EAAOA,QAASE,EAAhB,EAAgBA,MAAO2B,EAAvB,EAAuBA,aAAcV,EAArC,EAAqCA,WAE/B4C,EAAe,SAAC7B,GAClBuB,EAAQvB,IAGZwB,qBAAU,WACNC,MACD,CAACgB,EAAMsC,SAGV,IAAMtD,EAAa,WACf,IAAOsD,EAAUtC,EAAVsC,OACHA,IAGJ9F,IACAU,EAAaoF,GACR9C,KAAKJ,KAGRmD,EAAWhF,GAAQlC,GAAWE,EAAQ,KAAO,cAAC,EAAD,IAC7CkE,EAAelE,EAAQ,cAACR,EAAA,EAAD,IAAmB,KAC1C2E,EAAUrE,EAAU,cAACsE,EAAA,EAAD,IAAc,KAClCC,EAAYvE,GAAWE,IAAUgC,EAA+B,KAAvB,cAAC,EAAD,CAAMA,KAAMA,IAC3D,OACI,sBAAKmB,UAAU,aAAf,UACK6D,EACA9C,EACAC,EACAE,M,gCCjBE4C,E,4MAlBXC,MAAQ,CACJlH,OAAO,G,uDAGX,SAAkBA,EAAOmH,GACrBC,KAAKC,SAAS,CACVrH,OAAO,M,oBAIf,WACI,OAAGoH,KAAKF,MAAMlH,MACH,cAACR,EAAA,EAAD,IAEJ4H,KAAK3C,MAAM6C,a,GAhBEC,aCHb,MAA0B,mCCiC1BC,UA1BE,WACb,MAAgC3H,mBAAS,MAAzC,mBAAO4H,EAAP,KAAqBlE,EAArB,KAKA,OACI,qCACK,cAAC,EAAD,UACG,cAAC,EAAD,MAEJ,sBAAKJ,UAAU,gBAAf,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAU6C,eAVH,SAACpE,GACpB2B,EAAQ3B,QAWA,cAAC,EAAD,UACI,cAAC,EAAD,CAAUmF,OAAQU,SAK1B,qBAAKtE,UAAU,gBAAgB1D,IAAKiI,EAAY/H,IAAI","file":"static/js/4.fcc12fa9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={img} alt='error' />\r\n    )\r\n}\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apikey = 'apikey=63749846ec85994619d58c54e7006d92';\r\n    const _baseOffset = 210;\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apikey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apikey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apikey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apikey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n\r\n   const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n        }\r\n    }\r\n\r\n    return {loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'aplication/json'}) => {\r\n        setLoading(true);\r\n\r\n        try {\r\n            const responce = await fetch(url, {method, body, headers});\r\n\r\n            if(!responce.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${responce.status}`);\r\n            }\r\n            const data = await responce.json();\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw(e);\r\n        }  \r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError};\r\n}","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useState, useEffect} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n            getCharacter(id).then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    \n   const {loading, error, getAllCharacters} = useMarvelService();\n\n   useEffect(() => {\n       onRequest(offset, true);\n   }, []);\n\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded);\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if(newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n     \n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n        // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n        // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n        // в отдельный компонент. Но кода будет больше, появится новое состояние\n        // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n\n        // По возможности, не злоупотребляйте рефами, только в крайних случаях\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <li \n                    className=\"char__item\"\n                    key={item.id}\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}    \n                    onClick={() => {props.onCharSelected(item.id);\n                        focusOnItem(i);}}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            this.props.onCharSelected(item.id);\n                            this.focusOnItem(i);\n                            }\n                        }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n    \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Sceleton from '../skeleton/Skeleton';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n\n    const updateChar = () => {\n        const {charId} = props;\n        if(!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded);\n    }\n\n    const sceleton = char || loading || error ? null : <Sceleton />;\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n    return (\n        <div className=\"char__info\">\n            {sceleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let srcNull;\n    if(thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        srcNull = {'objectFit' : 'contain'};\n    } else {\n        srcNull = {'objectFit' : 'cover'};\n    }\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={srcNull} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        //eslint-disable-next-line\n                        if(i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n                \n            </ul>\n        </>\n    )\n}\n \nexport default CharInfo;","import {Component} from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundery extends Component {\r\n\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundery;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundery from \"../errorBoundery/ErrorBoundery\";\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n    return (\r\n        <>\r\n             <ErrorBoundery>\r\n                <RandomChar/>\r\n            </ErrorBoundery>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundery>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundery>\r\n                <ErrorBoundery>\r\n                    <CharInfo charId={selectedChar}/>\r\n                </ErrorBoundery>\r\n                \r\n                \r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}